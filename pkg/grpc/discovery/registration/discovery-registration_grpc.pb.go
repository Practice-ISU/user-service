// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: discovery-registration.proto

package registration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceRegistrationClient is the client API for ServiceRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceRegistrationClient interface {
	// Method to register a service by name and channel and save it to the database.
	Registration(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type serviceRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRegistrationClient(cc grpc.ClientConnInterface) ServiceRegistrationClient {
	return &serviceRegistrationClient{cc}
}

func (c *serviceRegistrationClient) Registration(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/discovery_registration.ServiceRegistration/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRegistrationServer is the server API for ServiceRegistration service.
// All implementations must embed UnimplementedServiceRegistrationServer
// for forward compatibility
type ServiceRegistrationServer interface {
	// Method to register a service by name and channel and save it to the database.
	Registration(context.Context, *ServiceRequest) (*ServiceResponse, error)
	mustEmbedUnimplementedServiceRegistrationServer()
}

// UnimplementedServiceRegistrationServer must be embedded to have forward compatible implementations.
type UnimplementedServiceRegistrationServer struct {
}

func (UnimplementedServiceRegistrationServer) Registration(context.Context, *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedServiceRegistrationServer) mustEmbedUnimplementedServiceRegistrationServer() {}

// UnsafeServiceRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRegistrationServer will
// result in compilation errors.
type UnsafeServiceRegistrationServer interface {
	mustEmbedUnimplementedServiceRegistrationServer()
}

func RegisterServiceRegistrationServer(s grpc.ServiceRegistrar, srv ServiceRegistrationServer) {
	s.RegisterService(&ServiceRegistration_ServiceDesc, srv)
}

func _ServiceRegistration_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistrationServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery_registration.ServiceRegistration/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistrationServer).Registration(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceRegistration_ServiceDesc is the grpc.ServiceDesc for ServiceRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discovery_registration.ServiceRegistration",
	HandlerType: (*ServiceRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _ServiceRegistration_Registration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery-registration.proto",
}
